version: 2.1
commands:
  early_return_for_forked_pull_requests:
    description: >-
      If this build is from a fork, stop executing the current job and return success.
      This is useful to avoid steps that will fail due to missing credentials.
    steps:
      - run:
          name: Early return if this build is from a forked PR
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              echo "Nothing to do for forked PRs, so marking this step successful"
              circleci step halt
            fi

jobs:
  build:
    docker:
      - image: 'redisfab/rmbuilder:6.0.1-x64-bionic'
    steps:
      - checkout
      - run:
          name: Build
          command: make -j 8
      - run:
          name: Test
          command: make test
      - run:
          name: Coverage
          command: >-
            apt-get update &&
            apt-get install -y lcov curl &&
            make coverage &&
            bash <(curl -s https://codecov.io/bash)
      - early_return_for_forked_pull_requests
      - run:
          name: Persist Artifacts
          command: >-
            mkdir -p /workspace/build && cp $MODULE_ARTIFACT /workspace/ && cp ramp.yml /workspace
      - persist_to_workspace:
          root: /workspace
          paths:
            - '*.so'
            - ramp.yml
            - build

  package_branch:
    docker:
      - image: 'redisfab/rmbuilder:6.0.1-x64-bionic'
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Package
          command: |
            export LC_ALL=C.UTF-8
            export LANG=C.UTF-8
            python -m RAMP.ramp pack -m /workspace/ramp.yml -o /workspace/build/$PACKAGE_NAME.{os}-{architecture}.$CIRCLE_BRANCH.zip /workspace/$MODULE_ARTIFACT
      - persist_to_workspace:
          root: /workspace
          paths:
            - build
      - store_artifacts:
          path: /workspace/build
  package_release:
    docker:
      - image: 'redisfab/rmbuilder:6.0.1-x64-bionic'
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Package
          command: |
            export LC_ALL=C.UTF-8
            export LANG=C.UTF-8
            python -m RAMP.ramp pack -m /workspace/ramp.yml -o /workspace/build/$PACKAGE_NAME.{os}-{architecture}.{semantic_version}.zip /workspace/$MODULE_ARTIFACT
      - run:
          name: Package
          command: |
            export LC_ALL=C.UTF-8
            export LANG=C.UTF-8
            python -m RAMP.ramp pack -m /workspace/ramp.yml -o /workspace/build/$PACKAGE_NAME.{os}-{architecture}.latest.zip /workspace/$MODULE_ARTIFACT
      - persist_to_workspace:
          root: /workspace
          paths:
            - build
      - store_artifacts:
          path: /workspace/build
  deploy_branch:
    docker:
      - image: 'redisfab/rmbuilder:6.0.1-x64-bionic'
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Deploy to S3
          command: >-
            aws s3 cp /workspace/build/ s3://redismodules/$PACKAGE_NAME/ --acl
            public-read --recursive --exclude "*" --include "*.zip"
  deploy_release:
    docker:
      - image: 'redisfab/rmbuilder:6.0.1-x64-bionic'
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Deploy to S3
          command: >-
            aws s3 cp /workspace/build/ s3://redismodules/$PACKAGE_NAME/ --acl
            public-read --recursive --exclude "*" --include "*.zip"

workflows:
  version: 2
  build_and_package:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - package_branch:
          requires:
            - build
          filters:
            branches:
              only: master
      - package_release:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: '/^v[0-9].*/'
      - deploy_branch:
          requires:
            - package_branch
      - deploy_release:
          filters:
            tags:
              only: '/^v[0-9].*/'
          requires:
            - package_release
