version: 2.1

commands:
  early_return_for_forked_pull_requests:
    description: >-
      If this build is from a fork, stop executing the current job and return success.
      This is useful to avoid steps that will fail due to missing credentials.
    steps:
      - run:
          name: Early return if this build is from a forked PR
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              echo "Nothing to do for forked PRs, so marking this step successful"
              circleci step halt
            fi

  setup-automation:
    steps:
      - run:
          name: Setup automation
          command: |
            (mkdir -p deps; cd deps; git clone https://github.com/RedisLabsModules/readies.git)
            PIP=1 ./deps/readies/bin/getpy2
            python2 -m pip install -r ./deps/readies/paella/requirements.txt


jobs:
  lint:
    docker:
      - image: redislabsmodules/llvm-toolset:latest
    steps:
      - checkout
      - run:
          name: lint
          command: |
            make lint

  static-analysis-infer:
    docker:
      - image: redisbench/infer-linux64:1.0.0
    steps:
      - checkout
      - run:
          name: Submodule checkout
          command: git submodule update --init --recursive
      - run:
          name: run fbinfer
          command: |
            CC=clang INFER=infer make static-analysis

  build:
    docker:
      - image: 'redisfab/rmbuilder:6.0.9-x64-bionic'
    steps:
      - checkout
      - run:
          name: Submodule checkout
          command: git submodule update --init --recursive
      - setup-automation
      - run:
          name: Build
          command: make -j `nproc`
      - run:
          name: Test
          command: make test
      - run:
          name: Coverage
          command: |
            apt-get update -qq
            apt-get install -y lcov curl
            make coverage
            bash <(curl -s https://codecov.io/bash)
      - early_return_for_forked_pull_requests
      - run:
          name: Persist Artifacts
          command: |
            mkdir -p /workspace/build
            cp $MODULE_ARTIFACT /workspace/
            cp ramp.yml /workspace

      - persist_to_workspace:
          root: /workspace
          paths:
            - '*.so'
            - ramp.yml
            - build

  package_branch:
    docker:
      - image: 'redisfab/rmbuilder:6.0.9-x64-bionic'
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Package
          command: |
            export LC_ALL=C.UTF-8
            export LANG=C.UTF-8
            python -m RAMP.ramp pack -m /workspace/ramp.yml -o /workspace/build/$PACKAGE_NAME.{os}-{architecture}.$CIRCLE_BRANCH.zip /workspace/$MODULE_ARTIFACT
      - persist_to_workspace:
          root: /workspace
          paths:
            - build
      - store_artifacts:
          path: /workspace/build
  package_release:
    docker:
      - image: 'redisfab/rmbuilder:6.0.9-x64-bionic'
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Package
          command: |
            export LC_ALL=C.UTF-8
            export LANG=C.UTF-8
            python -m RAMP.ramp pack -m /workspace/ramp.yml -o /workspace/build/$PACKAGE_NAME.{os}-{architecture}.{semantic_version}.zip /workspace/$MODULE_ARTIFACT
      - run:
          name: Package
          command: |
            export LC_ALL=C.UTF-8
            export LANG=C.UTF-8
            python -m RAMP.ramp pack -m /workspace/ramp.yml -o /workspace/build/$PACKAGE_NAME.{os}-{architecture}.latest.zip /workspace/$MODULE_ARTIFACT
      - persist_to_workspace:
          root: /workspace
          paths:
            - build
      - store_artifacts:
          path: /workspace/build
  deploy_branch:
    docker:
      - image: 'redisfab/rmbuilder:6.0.9-x64-bionic'
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Deploy to S3
          command: >-
            aws s3 cp /workspace/build/ s3://redismodules/$PACKAGE_NAME/ --acl
            public-read --recursive --exclude "*" --include "*.zip"
  deploy_release:
    docker:
      - image: 'redisfab/rmbuilder:6.0.9-x64-bionic'
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Deploy to S3
          command: >-
            aws s3 cp /workspace/build/ s3://redismodules/$PACKAGE_NAME/ --acl
            public-read --recursive --exclude "*" --include "*.zip"

  release_automation:
    docker:
      - image: redisfab/rmbuilder:6.0.9-x64-buster
    steps:
      - checkout
      - setup-automation
      - run:
          name: Run QA Automation
          command: MODULE_VERSION=$CIRCLE_TAG VERBOSE=1 TEST=release ./tests/qa/run

  nightly_automation:
    docker:
      - image: redisfab/rmbuilder:6.0.9-x64-buster
    steps:
      - checkout
      - setup-automation
      - run:
          name: Run QA Automation
          command: MODULE_VERSION=$CIRCLE_BRANCH VERBOSE=1 TEST=nightly QUICK=1 ./tests/qa/run


on-any-branch: &on-any-branch
  filters:
    branches:
      only: /.*/
    tags:
      only: /.*/

never: &never
  filters:
    branches:
      ignore: /.*/
    tags:
      ignore: /.*/

on-master: &on-master
  filters:
    branches:
      only: master

on-version-tags: &on-version-tags
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^v[0-9].*/

on-master-and-version-tags: &on-master-and-version-tags
  filters:
    branches:
      only:
        - master
    tags:
      only: /^v[0-9].*/


workflows:
  version: 2
  build_and_package:
    jobs:
      - lint 
      - static-analysis-infer
      - build:
          <<: *on-any-branch
          requires:
            - lint
      - package_branch:
          <<: *on-master
          requires:
            - build
      - package_release:
          <<: *on-version-tags
          requires:
            - build
      - deploy_branch:
          requires:
            - package_branch
      - release_automation:
          requires:
            - deploy_branch
      - deploy_release:
          <<: *on-version-tags
          requires:
            - package_release

  nightly:
    triggers:
      - schedule:
          cron: "07 20 * * *"
          <<: *on-master
    jobs:
      - nightly_automation
