version: 2.1

commands:
  early_return_for_forked_pull_requests:
    description: >-
      If this build is from a fork, stop executing the current job and return success.
      This is useful to avoid steps that will fail due to missing credentials.
    steps:
      - run:
          name: Early return if this build is from a forked PR
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              echo "Nothing to do for forked PRs, so marking this step successful"
              circleci step halt
            fi

  early-returns:
    steps:
      - run:
          name: Early return if this is a docs build
          command: |
            if [[ $CIRCLE_BRANCH == *docs ]]; then
              echo "Identifies as documents PR, no testing required."
              circleci step halt
            fi
      - run:
          name: Early return if this branch should ignore CI
          command: |
            if [[ $CIRCLE_BRANCH == *noci ]]; then
              echo "Identifies as actively ignoring CI, no testing required."
              circleci step halt
            fi

  setup-executor:
    steps:
      - run:
          name: Setup executor
          command: |
            apt-get -qq update
            apt-get -q install -y git openssh-client curl ca-certificates make tar gzip
            bash <(curl -fsSL https://raw.githubusercontent.com/docker/docker-install/master/install.sh)
      - setup_remote_docker:
          version: 20.10.2
          docker_layer_caching: true

  checkout-all:
    steps:
      - checkout
      - run:
          name: Checkout submodules
          command: git submodule update --init --recursive

  setup-automation:
    steps:
      - run:
          name: Pull Submodules
          command: |
            make fetch
      - run:
          name: Setup automation
          command: |
            make setup

  ci_steps:
    parameters:
      platform:
        type: string
      getredis_params:
        type: string
        default: ""
      build_params:
        type: string
        default: ""
      test_params:
        type: string
        default: ""
    steps:
      - early-returns
      - checkout-all
      - setup-automation
      - run:
          name: Install Redis
          command: python3 ./deps/readies/bin/getredis -v 6 <<parameters.getredis_params>>
      - run:
          name: Build
          command: make build <<parameters.build_params>> SHOW=1
      - run:
          name: Flow Test
          no_output_timeout: 30m
          command: |
            mkdir -p ~/workspace/tests
            make test TEST_REPORT_DIR=$HOME/workspace/tests <<parameters.test_params>> SHOW=1

  benchmark-steps:
    parameters:
      github_actor:
        type: string
        default: $CIRCLE_USERNAME
      module_path:
        type: string
        default: ../../redisbloom.so
    steps:
      - run:
          name: Install remote benchmark tool dependencies
          command: |
            VERSION=0.14.8 ./deps/readies/bin/getterraform
      - run:
          name: Install remote benchmark python dependencies
          command: python3 -m pip install -r ./tests/benchmarks/requirements.txt
      - run:
          name: Run CI benchmarks on aws
          timeout: 60m
          no_output_timeout: 30m
          command: |
            cd ./tests/benchmarks
            export AWS_ACCESS_KEY_ID=$PERFORMANCE_EC2_ACCESS_KEY
            export AWS_SECRET_ACCESS_KEY=$PERFORMANCE_EC2_SECRET_KEY
            export AWS_DEFAULT_REGION=$PERFORMANCE_EC2_REGION
            export EC2_PRIVATE_PEM=$PERFORMANCE_EC2_PRIVATE_PEM

            redisbench-admin run-remote \
              --required-module bf \
              --module_path << parameters.module_path >> \
              --github_actor << parameters.github_actor >> \
              --github_repo $CIRCLE_PROJECT_REPONAME \
              --github_org $CIRCLE_PROJECT_USERNAME \
              --github_sha $CIRCLE_SHA1 \
              --github_branch $CIRCLE_BRANCH \
              --upload_results_s3 \
              --triggering_env circleci \
              --push_results_redistimeseries

  platform-build-steps:
    parameters:
      platform:
        type: string
    steps:
      - early-returns
      - setup-executor
      - checkout-all
      - run:
          name: Install dependencies
          command: |
            ./deps/readies/bin/getpy3
      - run:
          name: Build for platform (docker build)
          command: |
            make -C build/docker build DOCKER_SUFFIX=".<<parameters.platform>>" OSNICK=<<parameters.platform>> ARTIFACTS=0 OFFICIAL=1

jobs:
  lint:
    docker:
      - image: redislabsmodules/llvm-toolset:latest
    steps:
      - checkout
      - setup-automation
      - run:
          name: lint
          command: |
            make lint

  static-analysis-infer:
    docker:
      - image: redisbench/infer-linux64:1.0.0
    steps:
      - checkout-all
      - run:
          name: run fbinfer
          command: |
            INFER=infer make static-analysis

  valgrind:
    docker:
      - image: redisfab/rmbuilder:6.2.3-x64-buster
    steps:
      - ci_steps:
          platform: debian
          build_params: VALGRIND=1 -j
          test_params: VALGRIND=1 SIMPLE=1
          getredis_params: --force --valgrind

  build:
    docker:
      - image: 'redisfab/rmbuilder:6.2.3-x64-bionic'
    steps:
      - ci_steps:
          platform: debian
      - run:
          name: Coverage
          command: |
            apt-get update -qq
            apt-get install -y lcov curl
            make coverage
            bash <(curl -s https://raw.githubusercontent.com/codecov/codecov-bash/master/codecov)
      - early_return_for_forked_pull_requests
      - run:
          name: Persist Artifacts
          command: |
            mkdir -p /workspace/build
            cp redisbloom.so /workspace/
            cp ramp.yml /workspace
      - early_return_for_forked_pull_requests
      - persist_to_workspace:
          root: /workspace
          paths:
            - '*.so'
            - ramp.yml
            - build

  platform_build:
    parameters:
      platform:
        type: string
    docker:
      - image: debian:bullseye
    steps:
      - platform-build-steps:
          platform: <<parameters.platform>>

  package_branch:
    docker:
      - image: 'redisfab/rmbuilder:6.2.3-x64-bionic'
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Package
          command: |
            export LC_ALL=C.UTF-8
            export LANG=C.UTF-8
            python -m RAMP.ramp pack -m /workspace/ramp.yml -o /workspace/build/$PACKAGE_NAME.{os}-{architecture}.$CIRCLE_BRANCH.zip /workspace/redisbloom.so
      - persist_to_workspace:
          root: /workspace
          paths:
            - build
      - store_artifacts:
          path: /workspace/build

  package_release:
    docker:
      - image: 'redisfab/rmbuilder:6.2.3-x64-bionic'
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Package
          command: |
            export LC_ALL=C.UTF-8
            export LANG=C.UTF-8
            python -m RAMP.ramp pack -m /workspace/ramp.yml -o /workspace/build/$PACKAGE_NAME.{os}-{architecture}.{semantic_version}.zip /workspace/redisbloom.so
      - run:
          name: Package
          command: |
            export LC_ALL=C.UTF-8
            export LANG=C.UTF-8
            python -m RAMP.ramp pack -m /workspace/ramp.yml -o /workspace/build/$PACKAGE_NAME.{os}-{architecture}.latest.zip /workspace/redisbloom.so
      - persist_to_workspace:
          root: /workspace
          paths:
            - build
      - store_artifacts:
          path: /workspace/build

  deploy_branch:
    docker:
      - image: 'redisfab/rmbuilder:6.2.3-x64-bionic'
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Deploy to S3
          command: >-
            aws s3 cp /workspace/build/ s3://redismodules/$PACKAGE_NAME/ --acl
            public-read --recursive --exclude "*" --include "*.zip"

  deploy_release:
    docker:
      - image: 'redisfab/rmbuilder:6.2.3-x64-bionic'
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Deploy to S3
          command: >-
            aws s3 cp /workspace/build/ s3://redismodules/$PACKAGE_NAME/ --acl
            public-read --recursive --exclude "*" --include "*.zip"

  release_automation:
    docker:
      - image: redisfab/rmbuilder:6.2.3-x64-buster
    steps:
      - checkout
      - setup-automation
      - run:
          name: Run QA Automation
          command: MODULE_VERSION=$CIRCLE_TAG VERBOSE=1 TEST=release ./tests/qa/run

  nightly_automation:
    docker:
      - image: redisfab/rmbuilder:6.2.3-x64-buster
    steps:
      - checkout
      - setup-automation
      - run:
          name: Run QA Automation
          command: MODULE_VERSION=$CIRCLE_BRANCH VERBOSE=1 TEST=nightly QUICK=1 ./tests/qa/run

  performance-automation:
    docker:
      - image: redisfab/rmbuilder:6.2.3-x64-bionic
    steps:
      - checkout
      - setup-automation
      - run:
          name: build artifact
          command: make build
      - benchmark-steps

#----------------------------------------------------------------------------------------------------------------------------------

on-any-branch: &on-any-branch
  filters:
    branches:
      only: /.*/
    tags:
      only: /.*/

never: &never
  filters:
    branches:
      ignore: /.*/
    tags:
      ignore: /.*/

on-master: &on-master
  filters:
    branches:
      only: master
    tags:
      ignore: /.*/

on-integ-branch: &on-integ-branch
  filters:
    branches:
      only:
        - master
        - /^\d+\.\d+.*$/
        - /^feature-.*$/
    tags:
      ignore: /.*/

not-on-integ-branch: &not-on-integ-branch
  filters:
    branches:
      ignore:
        - master
        - /^\d+\.\d+.*$/
        - /^feature-.*$/
    tags:
      ignore: /.*/

on-version-tags: &on-version-tags
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^v[0-9].*/

on-integ-and-version-tags: &on-integ-and-version-tags
  filters:
    branches:
      only:
        - master
        - /^\d+\.\d+.*$/
        - /^feature-.*$/
        - /^perf-.*$/
    tags:
      only: /^v[0-9].*/

context: &context
  context:
    - common

#----------------------------------------------------------------------------------------------------------------------------------

workflows:
  version: 2
  build_and_package:
    jobs:
      - lint:
          <<: *on-any-branch
      - static-analysis-infer:
          <<: *on-any-branch
      - build:
          <<: *on-any-branch
          requires:
            - lint
      - valgrind:
          <<: *on-any-branch
          requires:
            - lint
      - performance-automation:
          <<: *on-integ-and-version-tags
          requires:
            - lint
          context: common
      - package_branch:
          <<: *on-integ-branch
          requires:
            - build
      - package_release:
          <<: *on-version-tags
          requires:
            - build
      - platform_build:
          <<: *context
          <<: *on-integ-and-version-tags
          matrix:
            parameters:
              platform: [bionic, buster]
          requires:
            - build
      - deploy_branch:
          context: common
          <<: *on-integ-branch
          requires:
            - package_branch
      - deploy_release:
          context: common
          <<: *on-version-tags
          requires:
            - package_release
      - release_automation:
          context: common
          <<: *on-version-tags
          requires:
            - deploy_release

  nightly:
    triggers:
      - schedule:
          cron: "07 20 * * *"
          filters:
            branches:
              only:
                - master
                - /^feature-.*$/
    jobs:
      - performance-automation:
          context: common
