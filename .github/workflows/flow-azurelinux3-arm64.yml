name: Build and Test AzureLinux3 on arm64


permissions:
  id-token: write
  contents: read

on:
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab
    inputs:
      redis-ref:
        description: 'Redis ref to checkout'
        type: string
        required: true
        default: 'unstable'
      run_valgrind:
        description: 'Run valgrind on the tests'
        type: boolean
        default: false
      run_sanitizer:
        description: 'Run sanitizer on the tests'
        type: boolean
        default: false
  workflow_call: # Allows to run this workflow from another workflow
    inputs:
      redis-ref:
        description: 'Redis ref to checkout'
        type: string
        required: true
      run_valgrind:
        description: 'Run valgrind on the tests'
        type: boolean
        default: false
      run_sanitizer:
        description: 'Run sanitizer on the tests'
        type: boolean
        default: false
      beta-version:
        description: 'Version suffix for nightly builds (YYYYMMDD.HHMMSS.RUN_NUMBER format)'
        type: string
        required: false

jobs:
  prepare-values:
    runs-on: ubuntu-latest
    outputs:
      redis-ref: ${{ steps.set-env.outputs.redis-ref }}
      TAGGED: ${{ steps.set-env.outputs.TAGGED }}
      TAG: ${{ steps.set-env.outputs.TAG }}
      BRANCH: ${{ steps.set-env.outputs.BRANCH }}
      TAG_OR_BRANCH: ${{ steps.set-env.outputs.TAG }}${{ steps.set-env.outputs.BRANCH }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: set env
        id: set-env
        uses: ./.github/actions/setup-env
        with:
          github-ref: ${{ github.ref }}
          redis-ref: ${{ inputs.redis-ref }}
          beta-version: ${{ inputs.beta-version }}

  azurelinux3-arm64:
    runs-on: ubuntu24-arm64-4-16
    needs: prepare-values
    strategy:
      fail-fast: false
    container:
      image: "mcr.microsoft.com/azurelinux/base/core:3.0"
    defaults:
      run:
        shell: bash -l -eo pipefail {0}
    env:
      TAGGED: ${{ needs.prepare-values.outputs.TAGGED }}
      VERSION: ${{ needs.prepare-values.outputs.TAG }}
      BRANCH: ${{ needs.prepare-values.outputs.BRANCH }}
      TAG_OR_BRANCH: ${{ needs.prepare-values.outputs.TAG_OR_BRANCH }}
      PIP_BREAK_SYSTEM_PACKAGES: 1
    steps:
      - name: Install git
        run: tdnf install --noplugins --skipsignature -y ca-certificates git
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - name: Checkout Redis
        uses: actions/checkout@v4
        with:
          repository: redis/redis
          ref: ${{ needs.prepare-values.outputs.redis-ref }}
          path: redis
          submodules: 'recursive'
      - name: Setup
        working-directory: .install
        shell: bash
        run: |
          echo ::group::Install dependencies
            ./install_script.sh 
          echo ::endgroup::
      - name: build
        uses: ./.github/actions/build-module-and-redis
        with:
          build_sanitizer: ${{ inputs.run_sanitizer && 'addr' || '' }}
      - name: Run tests
        uses: ./.github/actions/run-tests
        with: 
          run_valgrind: ${{ inputs.run_valgrind && '1' || '0' }}
          run_sanitizer: ${{ inputs.run_sanitizer && 'addr' || '' }}
      - name: Upload test artifacts
        if: failure()
        uses: ./.github/actions/upload-artifacts
        with: 
          image: "mcr.microsoft.com/azurelinux/base/core:3.0"
          redis-ref: ${{ needs.prepare-values.outputs.redis-ref }}
      - name: Pack module
        if: ${{ !inputs.run_valgrind && !inputs.run_sanitizer }}
        uses: ./.github/actions/pack-module
        with:
          beta-version: ${{ inputs.beta-version }}
      - name: Upload artifacts to S3
        if: ${{ !inputs.run_valgrind && !inputs.run_sanitizer }}
        uses: ./.github/actions/upload-artifacts-to-s3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          github-ref: ${{ github.ref }}
          beta-version: ${{ inputs.beta-version }}
