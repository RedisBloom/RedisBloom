name: CI Full suite
# This is a full workflow for the production branches and tags, which
# includes building and testing on all supported platforms

# TODO:
#
# 1. Remove the use of "readies" completely.
# 2. Remove the use of all the scripts for anything and do everything
#    right here in the workflow.
#
# More info: jobs.steps.uses: docker://alpine:3.8 for docker images,

on:
  # TODO REMOVE FROM HERE
  pull_request:
    paths-ignore:
      - '.circleci/**'
      - 'docs/**'
      - '*.md'
    branches:
      - main
      - master
      - '[0-9]+.[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+'
      - 'feature-*'
  # TODO REMOVE TILL HERE
  push:
    paths-ignore:
      - '.circleci/**'
      - 'docs/**'
      - '*.md'
    branches:
      - main
      - master
      - '[0-9]+.[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+'
      - 'feature-*'
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+-rc[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-m[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  setup-environment:
    runs-on: ubuntu-latest
    outputs:
      TAGGED: ${{ steps.set-tagged.outputs.TAGGED }}
      TAG: ${{ steps.set-git-info.outputs.TAG }}
      BRANCH: ${{ steps.set-git-info.outputs.BRANCH }}
      TAG_OR_BRANCH: ${{ steps.set-git-info.outputs.TAG }}${{ steps.set-git-info.outputs.BRANCH }}
    steps:
      - name: Set the branch and tag outputs
        id: set-git-info
        run: |
          export REF="${{ github.ref }}"
          export BRANCH_PATTERN="^refs/heads/(.*)$"
          export TAG_PATTERN="^refs/tags/(.*)$"

          if [[ $REF =~ $BRANCH_PATTERN ]]; then
            echo "BRANCH=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          fi

          if [[ $REF =~ $TAG_PATTERN ]]; then
            echo "TAG=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          fi
      - name: Set the tagged flag
        id: set-tagged
        run: |
          # If this is a version tag, then set to false, meaning this
          # is not a production build.
          export REF="${{ github.ref }}"
          export PATTERN="refs/tags/v[0-9]+.*"
          if [[ $REF =~ $PATTERN ]]; then
            echo "This is a tagged build"
            echo "TAGGED=1" >> $GITHUB_OUTPUT
          else
            echo "This is not a tagged build"
            echo "TAGGED=0" >> $GITHUB_OUTPUT
          fi

  linter:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l -eo pipefail {0}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install build dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential
      - name: Linter
        run: make lint

  recent-ubuntu:
    runs-on: ${{ matrix.builder.os }}
    env:
      TAGGED: ${{ needs.setup-environment.outputs.TAGGED }}
      VERSION: ${{ needs.setup-environment.outputs.TAG }}
      BRANCH: ${{ needs.setup-environment.outputs.BRANCH }}
      TAG_OR_BRANCH: ${{ needs.setup-environment.outputs.TAG_OR_BRANCH}}
    strategy:
      fail-fast: false
      matrix:
        redis-version: ["6.0.20", "7.2.4", "unstable"]
        builder: [
          { os: 'ubuntu-22.04', nick: 'jammy' },
          { os: 'ubuntu-20.04', nick: 'focal' }
        ]
    defaults:
      run:
        shell: bash -l -eo pipefail {0}
    needs: setup-environment
    steps:
      - name: Install build dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential autoconf automake libtool cmake lcov valgrind
      - name: Setup Python for testing
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          architecture: 'x64'
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install Python dependencies
        run: |
          python3 -m pip install -r tests/flow/requirements.txt
          python3 -m pip install -r .install/build_package_requirements.txt
      - name: Checkout Redis
        uses: actions/checkout@v3
        with:
          repository: 'redis/redis'
          ref: ${{ matrix.redis-version }}
          path: 'redis'
      - name: Build Redis
        run: |
          cd redis && make -j `nproc`
          echo "REDIS_SERVER=$GITHUB_WORKSPACE/redis/src/redis-server" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/redis/src" >> $GITHUB_PATH
          export PATH="$GITHUB_WORKSPACE/redis/src:$PATH"
          redis-server --version
      - name: Build
        run: make -j 4
      - name: Run tests
        run: make test REDIS_SERVER=$GITHUB_WORKSPACE/redis/src/redis-server

  arm64-recent-ubuntu:
    runs-on: [self-hosted,ubuntu-2204-arm64]
    env:
      TAGGED: ${{ needs.setup-environment.outputs.TAGGED }}
      VERSION: ${{ needs.setup-environment.outputs.TAG }}
      BRANCH: ${{ needs.setup-environment.outputs.BRANCH }}
      TAG_OR_BRANCH: ${{ needs.setup-environment.outputs.TAG_OR_BRANCH}}
    strategy:
      fail-fast: false
      matrix:
        redis-version: ["6.0.20", "7.2.4", "unstable"]
    defaults:
      run:
        shell: bash -l -eo pipefail {0}
    needs: setup-environment
    steps:
      - name: Install build dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential autoconf automake libtool cmake lcov valgrind
      - name: Setup Python for testing
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          architecture: 'arm64'
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install Python dependencies
        run: |
          uname -a
          python3 -m pip install -r tests/flow/requirements.txt
          python3 -m pip install -r .install/build_package_requirements.txt
      - name: Checkout Redis
        uses: actions/checkout@v3
        with:
          repository: 'redis/redis'
          ref: ${{ matrix.redis-version }}
          path: 'redis'
      - name: Build Redis
        run: |
          cd redis && make -j `nproc`
          echo "REDIS_SERVER=$GITHUB_WORKSPACE/redis/src/redis-server" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/redis/src" >> $GITHUB_PATH
          export PATH="$GITHUB_WORKSPACE/redis/src:$PATH"
          redis-server --version
      - name: Build
        run: make -j 4
      - name: Run tests
        run: make test REDIS_SERVER=$GITHUB_WORKSPACE/redis/src/redis-server
      - name: Pack module
        run: make pack BRANCH=$TAG_OR_BRANCH SHOW=1

  arm64-old-ubuntu:
    runs-on: [self-hosted,ubuntu-2204-arm64]
    container: ${{ matrix.builder.image }}
    env:
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
      TAGGED: ${{ needs.setup-environment.outputs.TAGGED }}
      VERSION: ${{ needs.setup-environment.outputs.TAG }}
      BRANCH: ${{ needs.setup-environment.outputs.BRANCH }}
      TAG_OR_BRANCH: ${{ needs.setup-environment.outputs.TAG_OR_BRANCH}}
    strategy:
      fail-fast: false
      matrix:
        redis-version: ["6.0.20", "7.2.4", "unstable"]
        builder: [
          {
            image: 'ubuntu:focal',
            nick: 'focal'
          },
          {
            image: 'ubuntu:bionic',
            nick: 'bionic'
          }
        ]
    defaults:
      run:
        shell: bash -l -eo pipefail {0}
    needs: setup-environment
    steps:
      - name: Install build dependencies
        run: |
          apt-get update && apt-get install -y software-properties-common
          add-apt-repository ppa:git-core/ppa -y
          apt-get update
          apt-get install -y build-essential make autoconf automake libtool lcov git wget zlib1g-dev lsb-release libssl-dev openssl ca-certificates curl unzip
          wget https://cmake.org/files/v3.28/cmake-3.28.0.tar.gz
          tar -xzvf cmake-3.28.0.tar.gz
          cd cmake-3.28.0
          ./configure
          make -j `nproc`
          make install
          cd ..
          ln -s /usr/local/bin/cmake /usr/bin/cmake
          wget https://www.python.org/ftp/python/3.9.6/Python-3.9.6.tgz
          tar -xvf Python-3.9.6.tgz
          cd Python-3.9.6
          ./configure
          make -j `nproc`
          make altinstall
          cd ..
          rm /usr/bin/python3 && ln -s `which python3.9` /usr/bin/python3
          rm /usr/bin/lsb_release
          python3 --version
          make --version
          cmake --version
          python3 -m pip install --upgrade pip
      - name: Checkout RedisBloom
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install Python dependencies
        run: |
          python3 -m pip install -r tests/flow/requirements.txt
          python3 -m pip install -r .install/build_package_requirements.txt
      - name: Checkout Redis
        uses: actions/checkout@v3
        with:
          repository: 'redis/redis'
          ref: ${{ matrix.redis-version }}
          path: 'redis'
      - name: Build Redis
        run: |
          cd redis && make -j `nproc`
          echo "REDIS_SERVER=$GITHUB_WORKSPACE/redis/src/redis-server" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/redis/src" >> $GITHUB_PATH
          export PATH="$GITHUB_WORKSPACE/redis/src:$PATH"
          redis-server --version
      - name: Build RedisBloom
        run: make -j `nproc`
      - name: Run tests
        run: make test REDIS_SERVER=$GITHUB_WORKSPACE/redis/src/redis-server
      - name: Pack module
        run: make pack BRANCH=$TAG_OR_BRANCH SHOW=1

  test-valgrind:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        redis-version: ["6.0.20", "7.2.4", "unstable"]
    defaults:
      run:
        shell: bash -l -eo pipefail {0}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install build dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential autoconf automake libtool cmake lcov valgrind
      - name: Setup Python for testing
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          architecture: 'x64'
      - name: Install Python dependencies
        run:
          python -m pip install -r tests/flow/requirements.txt
      - name: Checkout Redis
        uses: actions/checkout@v3
        with:
          repository: 'redis/redis'
          ref: ${{ matrix.redis-version }}
          path: 'redis'
      - name: Build Redis
        run: |
          cd redis && make valgrind -j `nproc`
          echo "REDIS_SERVER=$GITHUB_WORKSPACE/redis/src/redis-server" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/redis/src" >> $GITHUB_PATH
          export PATH="$GITHUB_WORKSPACE/redis/src:$PATH"
          redis-server --version
      - name: Build
        run: make -j `nproc`
      - name: Run tests
        run: make test VG=1 REDIS_SERVER=$GITHUB_WORKSPACE/redis/src/redis-server

  test-address-sanitizer:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        redis-version: ["7.2.4", "unstable"]
    defaults:
      run:
        shell: bash -l -eo pipefail {0}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install build dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential autoconf automake libtool cmake lcov valgrind
      - name: Setup Python for testing
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          architecture: 'x64'
      - name: Install Python dependencies
        run:
          python -m pip install -r tests/flow/requirements.txt
      - name: Checkout Redis
        uses: actions/checkout@v3
        with:
          repository: 'redis/redis'
          ref: ${{ matrix.redis-version }}
          path: 'redis'
      - name: Build Redis
        run: |
          cd redis && make SANITIZER=address -j `nproc`
          echo "REDIS_SERVER=$GITHUB_WORKSPACE/redis/src/redis-server" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/redis/src" >> $GITHUB_PATH
          export PATH="$GITHUB_WORKSPACE/redis/src:$PATH"
          redis-server --version
      - name: Build
        run: make -j `nproc`
      - name: Run tests
        run: make test SAN=addr REDIS_SERVER=$GITHUB_WORKSPACE/redis/src/redis-server

  old-ubuntu:
    runs-on: ubuntu-latest
    container: ${{ matrix.builder.image }}
    env:
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
      TAGGED: ${{ needs.setup-environment.outputs.TAGGED }}
      VERSION: ${{ needs.setup-environment.outputs.TAG }}
      BRANCH: ${{ needs.setup-environment.outputs.BRANCH }}
      TAG_OR_BRANCH: ${{ needs.setup-environment.outputs.TAG_OR_BRANCH}}
    strategy:
      fail-fast: false
      matrix:
        redis-version: ["6.0.20", "7.2.4", "unstable"]
        builder: [
          {
            image: 'ubuntu:focal',
            nick: 'focal'
          },
          {
            image: 'ubuntu:bionic',
            nick: 'bionic'
          },
          {
            image: 'ubuntu:xenial',
            nick: 'xenial'
          }
        ]
    defaults:
      run:
        shell: bash -l -eo pipefail {0}
    needs: setup-environment
    steps:
      - name: Install build dependencies
        run: |
          apt-get update && apt-get install -y software-properties-common
          add-apt-repository ppa:git-core/ppa -y
          apt-get update
          apt-get install -y build-essential make autoconf automake libtool lcov git wget zlib1g-dev lsb-release libssl-dev openssl ca-certificates curl unzip
          wget https://cmake.org/files/v3.28/cmake-3.28.0.tar.gz
          tar -xzvf cmake-3.28.0.tar.gz
          cd cmake-3.28.0
          ./configure
          make -j `nproc`
          make install
          cd ..
          ln -s /usr/local/bin/cmake /usr/bin/cmake
          wget https://www.python.org/ftp/python/3.9.6/Python-3.9.6.tgz
          tar -xvf Python-3.9.6.tgz
          cd Python-3.9.6
          ./configure
          make -j `nproc`
          make altinstall
          cd ..
          rm /usr/bin/python3 && ln -s `which python3.9` /usr/bin/python3
          rm /usr/bin/lsb_release
          python3 --version
          make --version
          cmake --version
          python3 -m pip install --upgrade pip
      - name: Checkout RedisBloom
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install Python dependencies
        run: |
          python3 -m pip install -r tests/flow/requirements.txt
          python3 -m pip install -r .install/build_package_requirements.txt
      - name: Checkout Redis
        uses: actions/checkout@v3
        with:
          repository: 'redis/redis'
          ref: ${{ matrix.redis-version }}
          path: 'redis'
      - name: Build Redis
        run: |
          cd redis && make -j `nproc`
          echo "REDIS_SERVER=$GITHUB_WORKSPACE/redis/src/redis-server" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/redis/src" >> $GITHUB_PATH
          export PATH="$GITHUB_WORKSPACE/redis/src:$PATH"
          redis-server --version
      - name: Build RedisBloom
        run: make -j `nproc`
      - name: Run tests
        run: make test REDIS_SERVER=$GITHUB_WORKSPACE/redis/src/redis-server
      - name: Pack module
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
          make pack BRANCH=$TAG_OR_BRANCH SHOW=1

  debian:
    runs-on: ubuntu-latest
    container: ${{ matrix.builder.image }}
    env:
      TAGGED: ${{ needs.setup-environment.outputs.TAGGED }}
      VERSION: ${{ needs.setup-environment.outputs.TAG }}
      BRANCH: ${{ needs.setup-environment.outputs.BRANCH }}
      TAG_OR_BRANCH: ${{ needs.setup-environment.outputs.TAG_OR_BRANCH}}
    strategy:
      fail-fast: false
      matrix:
        redis-version: ["6.0.20", "7.2.4", "unstable"]
        builder: [
          {
            image: 'debian:bullseye',
            nick: 'bullseye'
          }
        ]
    defaults:
      run:
        shell: bash -l -eo pipefail {0}
    needs: setup-environment
    steps:
      - name: Install build dependencies
        run: |
          apt-get update
          apt-get install -y build-essential make cmake autoconf automake libtool lcov git wget zlib1g-dev lsb-release libssl-dev openssl ca-certificates python3 python3-pip curl unzip
          python3 --version
          make --version
          cmake --version
          python3 -m pip install --upgrade pip
      - name: Checkout RedisBloom
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install Python dependencies
        run: |
          python3 -m pip install -r tests/flow/requirements.txt
          python3 -m pip install -r .install/build_package_requirements.txt
      - name: Checkout Redis
        uses: actions/checkout@v3
        with:
          repository: 'redis/redis'
          ref: ${{ matrix.redis-version }}
          path: 'redis'
      - name: Build Redis
        run: |
          cd redis && make -j `nproc`
          echo "REDIS_SERVER=$GITHUB_WORKSPACE/redis/src/redis-server" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/redis/src" >> $GITHUB_PATH
          export PATH="$GITHUB_WORKSPACE/redis/src:$PATH"
          redis-server --version
      - name: Build RedisBloom
        run: make -j `nproc`
      - name: Run tests
        run: make test REDIS_SERVER=$GITHUB_WORKSPACE/redis/src/redis-server

  centos:
    runs-on: ubuntu-latest
    container: ${{ matrix.builder.image }}
    env:
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
      TAGGED: ${{ needs.setup-environment.outputs.TAGGED }}
      VERSION: ${{ needs.setup-environment.outputs.TAG }}
      BRANCH: ${{ needs.setup-environment.outputs.BRANCH }}
      TAG_OR_BRANCH: ${{ needs.setup-environment.outputs.TAG_OR_BRANCH}}
    strategy:
      fail-fast: false
      matrix:
        redis-version: ["6.2.14", "7.2.4", "unstable"]
        builder: [
          {
            image: 'centos:7',
            nick: 'centos7'
          }
        ]
    defaults:
      run:
        shell: bash -l -eo pipefail {0}
    needs: setup-environment
    steps:
      - name: Install build dependencies
        run: |
          yum-config-manager --add-repo http://vault.centos.org/centos/7/sclo/x86_64/rh/
          rpm --import https://vault.centos.org/RPM-GPG-KEY-CentOS-7
          # http://mirror.centos.org/centos/7/ is deprecated, so we have to disable mirrorlists
          # and change the baseurl in the repo file to the working mirror (from mirror.centos.org to vault.centos.org)
          sed -i s/mirror.centos.org/vault.centos.org/g /etc/yum.repos.d/*.repo
          sed -i s/^#.*baseurl=http/baseurl=http/g /etc/yum.repos.d/*.repo
          sed -i s/^mirrorlist=http/#mirrorlist=http/g /etc/yum.repos.d/*.repo
          yum -y install epel-release
          yum -y install http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-2.noarch.rpm
          yum -y install make cmake3 git python-pip openssl-devel bzip2-devel libffi-devel zlib-devel wget centos-release-scl scl-utils
          sed -i s/mirror.centos.org/vault.centos.org/g /etc/yum.repos.d/*.repo
          sed -i s/^#.*baseurl=http/baseurl=http/g /etc/yum.repos.d/*.repo
          sed -i s/^mirrorlist=http/#mirrorlist=http/g /etc/yum.repos.d/*.repo
          yum groups mark convert
          yum groupinstall "Development Tools" -y
          yum install -y devtoolset-11
          . scl_source enable devtoolset-11 || true
          make --version
          gcc --version
          git --version
          wget https://www.python.org/ftp/python/3.9.6/Python-3.9.6.tgz
          tar -xvf Python-3.9.6.tgz
          cd Python-3.9.6
          ./configure
          make -j `nproc`
          make altinstall
          cd ..
          rm /usr/bin/python3 && ln -s `which python3.9` /usr/bin/python3
          ln -s `which cmake3` /usr/bin/cmake
          python3 --version
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install Python dependencies
        run: |
          scl enable devtoolset-11 bash
          python3 -m pip install -r tests/flow/requirements.txt
          python3 -m pip install -r .install/build_package_requirements.txt
      - name: Checkout Redis
        uses: actions/checkout@v3
        with:
          repository: 'redis/redis'
          ref: ${{ matrix.redis-version }}
          path: 'redis'
      - name: Build Redis
        run: |
          . scl_source enable devtoolset-11 || true
          cd redis && make -j `nproc`
          echo "REDIS_SERVER=$GITHUB_WORKSPACE/redis/src/redis-server" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/redis/src" >> $GITHUB_PATH
          export PATH="$GITHUB_WORKSPACE/redis/src:$PATH"
          redis-server --version
      - name: Build RedisBloom
        run: |
          . scl_source enable devtoolset-11 || true
          make -j `nproc`
      - name: Run tests
        run: |
          . scl_source enable devtoolset-11 || true
          make test REDIS_SERVER=$GITHUB_WORKSPACE/redis/src/redis-server

  amazon-linux:
    runs-on: ubuntu-latest
    container: ${{ matrix.builder.image }}
    env:
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
      TAGGED: ${{ needs.setup-environment.outputs.TAGGED }}
      VERSION: ${{ needs.setup-environment.outputs.TAG }}
      BRANCH: ${{ needs.setup-environment.outputs.BRANCH }}
      TAG_OR_BRANCH: ${{ needs.setup-environment.outputs.TAG_OR_BRANCH}}
    strategy:
      fail-fast: false
      matrix:
        redis-version: ["6.0.20", "7.2.4", "unstable"]
        builder: [
          {
            image: 'amazonlinux:2',
            nick: 'amzn2'
          }
        ]
    defaults:
      run:
        shell: bash -l -eo pipefail {0}
    needs: setup-environment
    steps:
      - name: Install build dependencies
        run: |
          amazon-linux-extras install epel -y
          yum -y install epel-release yum-utils
          yum-config-manager --add-repo http://vault.centos.org/centos/7/sclo/x86_64/rh/
          yum -y install gcc make cmake3 git python-pip openssl-devel bzip2-devel libffi-devel zlib-devel wget centos-release-scl scl-utils which tar unzip
          yum -y install devtoolset-11-gcc devtoolset-11-gcc-c++ devtoolset-11-make --nogpgcheck
          . scl_source enable devtoolset-11 || true
          make --version
          git --version
          wget https://www.python.org/ftp/python/3.9.6/Python-3.9.6.tgz
          tar -xvf Python-3.9.6.tgz
          cd Python-3.9.6
          ./configure
          make -j `nproc`
          make altinstall
          cd ..
          rm /usr/bin/python3 && ln -s `which python3.9` /usr/bin/python3
          ln -s `which cmake3` /usr/bin/cmake
          python3 --version
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install Python dependencies
        run: |
          scl enable devtoolset-11 bash
          python3 -m pip install -r tests/flow/requirements.txt
          python3 -m pip install -r .install/build_package_requirements.txt
      - name: Checkout Redis
        uses: actions/checkout@v3
        with:
          repository: 'redis/redis'
          ref: ${{ matrix.redis-version }}
          path: 'redis'
      - name: Build Redis
        run: |
          . scl_source enable devtoolset-11 || true
          cd redis && make -j `nproc`
          echo "REDIS_SERVER=$GITHUB_WORKSPACE/redis/src/redis-server" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/redis/src" >> $GITHUB_PATH
          export PATH="$GITHUB_WORKSPACE/redis/src:$PATH"
          redis-server --version
      - name: Build RedisBloom
        run: |
          . scl_source enable devtoolset-11 || true
          make -j `nproc`
      - name: Run tests
        run: |
          . scl_source enable devtoolset-11 || true
          make test REDIS_SERVER=$GITHUB_WORKSPACE/redis/src/redis-server

  rocky-linux:
    runs-on: ubuntu-latest
    container: ${{ matrix.builder.image }}
    env:
      TAGGED: ${{ needs.setup-environment.outputs.TAGGED }}
      VERSION: ${{ needs.setup-environment.outputs.TAG }}
      BRANCH: ${{ needs.setup-environment.outputs.BRANCH }}
      TAG_OR_BRANCH: ${{ needs.setup-environment.outputs.TAG_OR_BRANCH}}
    strategy:
      fail-fast: false
      matrix:
        redis-version: ["6.0.20", "7.2.4", "unstable"]
        builder: [{
            image: 'rockylinux:8',
            nick: 'rocky8'
          },
          {
            image: 'rockylinux:9',
            nick: 'rocky9'
          }
        ]
    defaults:
      run:
        shell: bash -l -eo pipefail {0}
    needs: setup-environment
    steps:
      - name: Install build dependencies
        run: |
          yum -y install epel-release
          yum -y install http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-2.noarch.rpm
          yum -y install gcc make cmake3 git openssl-devel bzip2-devel libffi-devel zlib-devel wget scl-utils gcc-toolset-13 which
          yum groupinstall "Development Tools" -y
          . scl_source enable gcc-toolset-13 || true
          make --version
          gcc --version
          git --version
          wget https://www.python.org/ftp/python/3.9.6/Python-3.9.6.tgz
          tar -xvf Python-3.9.6.tgz
          cd Python-3.9.6
          ./configure
          make -j `nproc`
          make altinstall
          cd ..
          rm /usr/bin/python3 && ln -s `which python3.9` /usr/bin/python3
          cmake --version
          python3 --version
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install Python dependencies
        run: |
          . scl_source enable gcc-toolset-13 || true
          python3 -m pip install -r tests/flow/requirements.txt
          python3 -m pip install -r .install/build_package_requirements.txt
      - name: Checkout Redis
        uses: actions/checkout@v3
        with:
          repository: 'redis/redis'
          ref: ${{ matrix.redis-version }}
          path: 'redis'
      - name: Build Redis
        run: |
          cd redis && make -j `nproc`
          echo "REDIS_SERVER=$GITHUB_WORKSPACE/redis/src/redis-server" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/redis/src" >> $GITHUB_PATH
          export PATH="$GITHUB_WORKSPACE/redis/src:$PATH"
          redis-server --version
      - name: Build RedisBloom
        run: |
          . scl_source enable gcc-toolset-13 || true
          make -j `nproc`
      - name: Run tests
        run: |
          . scl_source enable gcc-toolset-13 || true
          make test REDIS_SERVER=$GITHUB_WORKSPACE/redis/src/redis-server

  alpine:
    runs-on: ${{ matrix.builder.os }}
    container:
      image: alpine:3
    env:
      TAGGED: ${{ needs.setup-environment.outputs.TAGGED }}
      VERSION: ${{ needs.setup-environment.outputs.TAG }}
      BRANCH: ${{ needs.setup-environment.outputs.BRANCH }}
      TAG_OR_BRANCH: ${{ needs.setup-environment.outputs.TAG_OR_BRANCH}}
      # https://github.com/actions/checkout/issues/1487
      # A workaround for the old runtime is to use these environment
      # variables, install the latest version of git within the container,
      # and use the actions/checkout@v3 instead of @v4, until it is fixed.
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
      ACTIONS_RUNNER_FORCED_INTERNAL_NODE_VERSION: node16
      ACTIONS_RUNNER_FORCE_ACTIONS_NODE_VERSION: node16
    strategy:
      fail-fast: false
      matrix:
        redis-version: ["6.0.20", "7.2.5", "unstable"]
        builder: [
          { os: [ubuntu-latest], nick: 'ubuntu-latest-x86' },
          { os: [self-hosted, ubuntu-2204-arm64], nick: 'ubuntu-22.04-arm64' }
        ]
    defaults:
      run:
        shell: bash
    steps:
      - name: Workaround alpine-arm64 GHA issues
        shell: sh
        run: |
          cp /etc/os-release /etc/os-release.bak
          sed -i 's/ID=alpine/ID=NotpineForGHA/g' /etc/os-release
      - name: Install prerequisites
        shell: sh
        run: |
          apk add bash make libtool tar cmake python3 python3-dev py3-pip gcc git curl build-base autoconf automake py3-cryptography linux-headers musl-dev libffi-dev openssl-dev openssh py-virtualenv clang18-libclang gcompat libstdc++ libgcc g++ openblas-dev xsimd git xz bsd-compat-headers clang18
      - name: Checkout the module
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: Install python dependencies
        run: |
          pip install -q --upgrade pip setuptools wheel
          pip install -q -r tests/flow/requirements.txt
          pip install -q jinja2 ramp-packer
        env:
          PIP_BREAK_SYSTEM_PACKAGES: 1
      - name: Checkout Redis
        uses: actions/checkout@v3
        with:
          repository: 'redis/redis'
          ref: ${{ matrix.redis-version }}
          path: 'redis'
      - name: Build Redis
        working-directory: redis
        run: |
          make -j `nproc`
          echo "REDIS_SERVER=$GITHUB_WORKSPACE/redis/src/redis-server" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/redis/src" >> $GITHUB_PATH
          export PATH="$GITHUB_WORKSPACE/redis/src:$PATH"
          redis-server --version
      - name: Build module
        run: |
          make build -j `nproc`
      - name: Test
        run: |
          make test REDIS_SERVER=$GITHUB_WORKSPACE/redis/src/redis-server
      - name: Pack module
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
          mv /etc/os-release.bak /etc/os-release
          make pack BRANCH=$TAG_OR_BRANCH SHOW=1
      - name: Workaround alpine-arm64 GHA issues (one more time)
        shell: sh
        run: |
          sed -i 's/ID=alpine/ID=NotpineForGHA/g' /etc/os-release

  macos-12:
    uses: ./.github/workflows/ci-full-macos.yml
    with:
      os: macos-12
      is_tag: ${{ needs.setup-environment.outputs.TAGGED == '1' }}
      tag_or_branch_name: ${{ needs.setup-environment.outputs.TAG_OR_BRANCH }}
      VERSION: ${{ needs.setup-environment.outputs.TAG }}
      BRANCH: ${{ needs.setup-environment.outputs.BRANCH }}
    needs: setup-environment
    secrets: inherit

  macos-13:
    uses: ./.github/workflows/ci-full-macos.yml
    with:
      os: macos-13
      is_tag: ${{ needs.setup-environment.outputs.TAGGED == '1' }}
      tag_or_branch_name: ${{ needs.setup-environment.outputs.TAG_OR_BRANCH }}
      VERSION: ${{ needs.setup-environment.outputs.TAG }}
      BRANCH: ${{ needs.setup-environment.outputs.BRANCH }}
    needs: setup-environment
    secrets: inherit

  macos-14:
    uses: ./.github/workflows/ci-full-macos.yml
    with:
      os: macos-14
      is_tag: ${{ needs.setup-environment.outputs.TAGGED == '1' }}
      tag_or_branch_name: ${{ needs.setup-environment.outputs.TAG_OR_BRANCH }}
      VERSION: ${{ needs.setup-environment.outputs.TAG }}
      BRANCH: ${{ needs.setup-environment.outputs.BRANCH }}
    needs: setup-environment
    secrets: inherit
