name: CI Full suite
# This is a full workflow for the production branches and tags, which
# includes building and testing on all supported platforms, and
# uploading the artifacts to S3.

# TODO:
#
# 1. Remove the use of "readies" completely.
# 2. Remove the use of all the scripts for anything and do everything
#    right here in the workflow.
# 3. Use the corresponding actions for the end goal: aws s3 upload
#    action, docker publish action, etc. This also will remove the need
#    for the installation of aws-cli and docker steps.
#
# More info: jobs.steps.uses: docker://alpine:3.8 for docker images,
# To use the AWS CLI: https://hub.docker.com/r/amazon/aws-cli
#
# To build and push docker images, instead of the Makefile/scripts, use
# https://docs.github.com/en/actions/publishing-packages/publishing-docker-images

on:
  push:
      paths-ignore:
          - '.circleci/**'
          - 'docs/**'
          - '*.md'
      branches:
          - main
          - master
          - '[0-9]+.[0-9]+.[0-9]+'
          - '[0-9]+.[0-9]+'
          - 'feature-*'
      tags:
          - 'v[0-9]+.[0-9]+.[0-9]+-rc[0-9]+'
          - 'v[0-9]+.[0-9]+.[0-9]+-m[0-9]+'
          - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  setup-environment:
    runs-on: ubuntu-latest
    outputs:
      STAGING: ${{ steps.set-staging.outputs.STAGING }}
      TAG: ${{ steps.set-git-info.outputs.TAG }}
      BRANCH: ${{ steps.set-git-info.outputs.BRANCH }}
    steps:
      - name: Set the branch and tag outputs
        id: set-git-info
        run: |
          export REF="${{ github.ref }}"
          export BRANCH_PATTERN="^refs/heads/(.*)$"
          export TAG_PATTERN="^refs/tags/(.*)$"

          if [[ $REF =~ $BRANCH_PATTERN ]]; then
            echo "BRANCH=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          fi

          if [[ $REF =~ $TAG_PATTERN ]]; then
            echo "TAG=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          fi
      - name: Set the staging flag
        id: set-staging
        run: |
          # If this is a version tag, then set to false, meaning this
          # is not a production build.
          export REF="${{ github.ref }}"
          export PATTERN="refs/tags/v[0-9]+.*"
          if [[ $REF =~ $PATTERN ]]; then
            echo "This is a production build"
            echo "STAGING=0" >> $GITHUB_OUTPUT
          else
            echo "This is a staging build"
            echo "STAGING=1" >> $GITHUB_OUTPUT
          fi

  recent-ubuntu:
    runs-on: ${{ matrix.builder.os }}
    env:
      STAGING: ${{ needs.setup-environment.outputs.STAGING }}
      VERSION: ${{ needs.setup-environment.outputs.TAG }}
      BRANCH: ${{ needs.setup-environment.outputs.BRANCH }}
    strategy:
      fail-fast: false
      matrix:
        redis-version: ["6.0.20", "7.2.4", "unstable"]
        builder: [
          { os: 'ubuntu-22.04', nick: 'jammy' },
          { os: 'ubuntu-20.04', nick: 'focal' }
        ]
    defaults:
      run:
        shell: bash -l -eo pipefail {0}
    needs: setup-environment
    steps:
      - name: Install build dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential autoconf automake libtool cmake lcov valgrind
      - name: Setup Python for testing
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          architecture: 'x64'
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install Python dependencies
        run:
          python3 -m pip install -r tests/flow/requirements.txt
      - name: Checkout Redis
        uses: actions/checkout@v3
        with:
          repository: 'redis/redis'
          ref: ${{ matrix.redis-version }}
          path: 'redis'
      - name: Build Redis
        run: cd redis && make -j 4
      - name: Build
        run: make -j 4
      - name: Run tests
        run: make test REDIS_SERVER=$GITHUB_WORKSPACE/redis/src/redis-server
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          unset-current-credentials: true
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: "us-east-2"
      - name: Upload artifacts to S3
        run: |
          # TODO: Get rid of this in favour of GitHub actions or a docker image:
          # https://hub.docker.com/r/amazon/aws-cli
          export HOMEBREW_NO_AUTO_UPDATE=1
          ./deps/readies/bin/getaws
          mkdir -p bin
          ln -s ~/workspace/artifacts bin/artifacts
          if [[ $STAGING -eq 1 ]]; then
            make upload-artifacts SHOW=1 VERBOSE=1
          fi
          make upload-release STAGING=$STAGING SHOW=1 VERBOSE=1
      - name: Publish docker image
        run: |
          # TODO: GET RID OF THIS in favour of GitHub actions or a docker image.
          # https://docs.github.com/en/actions/publishing-packages/publishing-docker-images
          ./deps/readies/bin/getdocker
          docker login -u redisfab -p ${{ secrets.DOCKER_REDISFAB_PASSWORD }}
          cd build/docker
          make publish OSNICK=${{ matrix.builder.nick }} VERSION="$VERSION" BRANCH="$BRANCH" OFFICIAL=1 SHOW=1
      - name: List artifacts
        run: |
          cd bin/artifacts
          du -ah --apparent-size *

  test-valgrind:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        redis-version: ["6.0.20", "7.2.4", "unstable"]
    defaults:
      run:
        shell: bash -l -eo pipefail {0}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install build dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential autoconf automake libtool cmake lcov valgrind
      - name: Setup Python for testing
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          architecture: 'x64'
      - name: Install Python dependencies
        run:
          python -m pip install -r tests/flow/requirements.txt
      - name: Checkout Redis
        uses: actions/checkout@v3
        with:
          repository: 'redis/redis'
          ref: ${{ matrix.redis-version }}
          path: 'redis'
      - name: Build Redis
        run: cd redis && make valgrind -j 4
      - name: Build
        run: make -j 4
      - name: Run tests
        run: make test VG=1 REDIS_SERVER=$GITHUB_WORKSPACE/redis/src/redis-server

  test-address-sanitizer:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        redis-version: ["7.2.4", "unstable"]
    defaults:
      run:
        shell: bash -l -eo pipefail {0}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install build dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential autoconf automake libtool cmake lcov valgrind
      - name: Setup Python for testing
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          architecture: 'x64'
      - name: Install Python dependencies
        run:
          python -m pip install -r tests/flow/requirements.txt
      - name: Checkout Redis
        uses: actions/checkout@v3
        with:
          repository: 'redis/redis'
          ref: ${{ matrix.redis-version }}
          path: 'redis'
      - name: Build Redis
        run: cd redis && make SANITIZER=address -j 4
      - name: Build
        run: make -j 4
      - name: Run tests
        run: make test SAN=addr REDIS_SERVER=$GITHUB_WORKSPACE/redis/src/redis-server

  old-ubuntu:
    runs-on: ubuntu-latest
    container: ${{ matrix.builder.image }}
    env:
      STAGING: ${{ needs.setup-environment.outputs.STAGING }}
      VERSION: ${{ needs.setup-environment.outputs.TAG }}
      BRANCH: ${{ needs.setup-environment.outputs.BRANCH }}
    strategy:
      fail-fast: false
      matrix:
        redis-version: ["6.0.20", "7.2.4", "unstable"]
        builder: [
          {
            image: 'ubuntu:xenial',
            nick: 'xenial'
          },
          {
            image: 'ubuntu:focal',
            nick: 'focal'
          }
        ]
    defaults:
      run:
        shell: bash -l -eo pipefail {0}
    needs: setup-environment
    steps:
      - name: Install build dependencies
        run: |
          apt-get update && apt-get install -y software-properties-common
          add-apt-repository ppa:git-core/ppa -y
          apt-get update
          apt-get install -y build-essential make autoconf automake libtool lcov git wget zlib1g-dev lsb-release libssl-dev openssl ca-certificates
          wget https://cmake.org/files/v3.28/cmake-3.28.0.tar.gz
          tar -xzvf cmake-3.28.0.tar.gz
          cd cmake-3.28.0
          ./configure
          make -j `nproc`
          make install
          cd ..
          ln -s /usr/local/bin/cmake /usr/bin/cmake
          wget https://www.python.org/ftp/python/3.9.6/Python-3.9.6.tgz
          tar -xvf Python-3.9.6.tgz
          cd Python-3.9.6
          ./configure
          make -j `nproc`
          make altinstall
          cd ..
          rm /usr/bin/python3 && ln -s `which python3.9` /usr/bin/python3
          rm /usr/bin/lsb_release
          python3 --version
          make --version
          cmake --version
          python3 -m pip install --upgrade pip
      - name: Checkout RedisBloom
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install Python dependencies
        run:
          python3 -m pip install -r tests/flow/requirements.txt
      - name: Checkout Redis
        uses: actions/checkout@v3
        with:
          repository: 'redis/redis'
          ref: ${{ matrix.redis-version }}
          path: 'redis'
      - name: Build Redis
        run: cd redis && make -j `nproc`
      - name: Build RedisBloom
        run: make -j `nproc`
      - name: Run tests
        run: make test REDIS_SERVER=$GITHUB_WORKSPACE/redis/src/redis-server
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"
      - name: Upload artifacts to S3
        run: |
          # TODO: Get rid of this in favour of GitHub actions or a docker image:
          # https://hub.docker.com/r/amazon/aws-cli
          export HOMEBREW_NO_AUTO_UPDATE=1
          ./deps/readies/bin/getaws
          mkdir -p bin
          ln -s ~/workspace/artifacts bin/artifacts
          if [[ $STAGING -eq 1 ]]; then
            make upload-artifacts SHOW=1 VERBOSE=1
          fi
          make upload-release STAGING=$STAGING SHOW=1 VERBOSE=1
      - name: Publish docker image
        run: |
          # TODO: GET RID OF THIS in favour of GitHub actions or a docker image.
          # https://docs.github.com/en/actions/publishing-packages/publishing-docker-images
          ./deps/readies/bin/getdocker
          docker login -u redisfab -p ${{ secrets.DOCKER_REDISFAB_PASSWORD }}
          cd build/docker
          make publish OSNICK=${{ matrix.builder.nick }} VERSION="$VERSION" BRANCH="$BRANCH" OFFICIAL=1 SHOW=1
      - name: List artifacts
        run: |
          cd bin/artifacts
          du -ah --apparent-size *

  debian:
    runs-on: ubuntu-latest
    container: ${{ matrix.builder.image }}
    env:
      STAGING: ${{ needs.setup-environment.outputs.STAGING }}
      VERSION: ${{ needs.setup-environment.outputs.TAG }}
      BRANCH: ${{ needs.setup-environment.outputs.BRANCH }}
    strategy:
      fail-fast: false
      matrix:
        redis-version: ["6.0.20", "7.2.4", "unstable"]
        builder: [
          {
            image: 'debian:bullseye',
            nick: 'bullseye'
          }
        ]
    defaults:
      run:
        shell: bash -l -eo pipefail {0}
    needs: setup-environment
    steps:
      - name: Install build dependencies
        run: |
          apt-get update
          apt-get install -y build-essential make cmake autoconf automake libtool lcov git wget zlib1g-dev lsb-release libssl-dev openssl ca-certificates python3 python3-pip
          python3 --version
          make --version
          cmake --version
          python3 -m pip install --upgrade pip
      - name: Checkout RedisBloom
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install Python dependencies
        run:
          python3 -m pip install -r tests/flow/requirements.txt
      - name: Checkout Redis
        uses: actions/checkout@v3
        with:
          repository: 'redis/redis'
          ref: ${{ matrix.redis-version }}
          path: 'redis'
      - name: Build Redis
        run: cd redis && make -j `nproc`
      - name: Build RedisBloom
        run: make -j `nproc`
      - name: Run tests
        run: make test REDIS_SERVER=$GITHUB_WORKSPACE/redis/src/redis-server
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"
      - name: Upload artifacts to S3
        run: |
          # TODO: Get rid of this in favour of GitHub actions or a docker image:
          # https://hub.docker.com/r/amazon/aws-cli
          export HOMEBREW_NO_AUTO_UPDATE=1
          ./deps/readies/bin/getaws
          mkdir -p bin
          ln -s ~/workspace/artifacts bin/artifacts
          if [[ $STAGING -eq 1 ]]; then
            make upload-artifacts SHOW=1 VERBOSE=1
          fi
          make upload-release STAGING=$STAGING SHOW=1 VERBOSE=1
      - name: Publish docker image
        run: |
          # TODO: GET RID OF THIS in favour of GitHub actions or a docker image.
          # https://docs.github.com/en/actions/publishing-packages/publishing-docker-images
          ./deps/readies/bin/getdocker
          docker login -u redisfab -p ${{ secrets.DOCKER_REDISFAB_PASSWORD }}
          cd build/docker
          make publish OSNICK=${{ matrix.builder.nick }} VERSION="$VERSION" BRANCH="$BRANCH" OFFICIAL=1 SHOW=1
      - name: List artifacts
        run: |
          cd bin/artifacts
          du -ah --apparent-size *

  centos:
    runs-on: ubuntu-latest
    container: ${{ matrix.builder.image }}
    env:
      STAGING: ${{ needs.setup-environment.outputs.STAGING }}
      VERSION: ${{ needs.setup-environment.outputs.TAG }}
      BRANCH: ${{ needs.setup-environment.outputs.BRANCH }}
    strategy:
      fail-fast: false
      matrix:
        redis-version: ["6.2.14", "7.2.4", "unstable"]
        builder: [
          {
            image: 'centos:7',
            nick: 'centos7'
          }
        ]
    defaults:
      run:
        shell: bash -l -eo pipefail {0}
    needs: setup-environment
    steps:
      - name: Install build dependencies
        run: |
          yum -y install epel-release
          yum -y install http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-2.noarch.rpm
          yum -y install gcc make cmake3 git python-pip openssl-devel bzip2-devel libffi-devel zlib-devel wget centos-release-scl scl-utils
          yum groupinstall "Development Tools" -y
          yum install -y devtoolset-11
          . scl_source enable devtoolset-11 || true
          make --version
          gcc --version
          git --version
          wget https://www.python.org/ftp/python/3.9.6/Python-3.9.6.tgz
          tar -xvf Python-3.9.6.tgz
          cd Python-3.9.6
          ./configure
          make -j `nproc`
          make altinstall
          cd ..
          rm /usr/bin/python3 && ln -s `which python3.9` /usr/bin/python3
          ln -s `which cmake3` /usr/bin/cmake
          python3 --version
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install Python dependencies
        run: |
          scl enable devtoolset-11 bash
          python3 -m pip install -r tests/flow/requirements.txt
      - name: Checkout Redis
        uses: actions/checkout@v3
        with:
          repository: 'redis/redis'
          ref: ${{ matrix.redis-version }}
          path: 'redis'
      - name: Build Redis
        run: |
          cd redis && make -j `nproc`
      - name: Build RedisBloom
        run: |
          . scl_source enable devtoolset-11 || true
          make -j `nproc`
      - name: Run tests
        run: |
          . scl_source enable devtoolset-11 || true
          make test REDIS_SERVER=$GITHUB_WORKSPACE/redis/src/redis-server
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"
      - name: Upload artifacts to S3
        run: |
          # TODO: Get rid of this in favour of GitHub actions or a docker image:
          # https://hub.docker.com/r/amazon/aws-cli
          export HOMEBREW_NO_AUTO_UPDATE=1
          ./deps/readies/bin/getaws
          mkdir -p bin
          ln -s ~/workspace/artifacts bin/artifacts
          if [[ $STAGING -eq 1 ]]; then
            make upload-artifacts SHOW=1 VERBOSE=1
          fi
          make upload-release STAGING=$STAGING SHOW=1 VERBOSE=1
      - name: Publish docker image
        run: |
          # TODO: GET RID OF THIS in favour of GitHub actions or a docker image.
          # https://docs.github.com/en/actions/publishing-packages/publishing-docker-images
          ./deps/readies/bin/getdocker
          docker login -u redisfab -p ${{ secrets.DOCKER_REDISFAB_PASSWORD }}
          cd build/docker
          make publish OSNICK=${{ matrix.builder.nick }} VERSION="$VERSION" BRANCH="$BRANCH" OFFICIAL=1 SHOW=1
      - name: List artifacts
        run: |
          cd bin/artifacts
          du -ah --apparent-size *

  amazon-linux:
    runs-on: ubuntu-latest
    container: ${{ matrix.builder.image }}
    env:
      STAGING: ${{ needs.setup-environment.outputs.STAGING }}
      VERSION: ${{ needs.setup-environment.outputs.TAG }}
      BRANCH: ${{ needs.setup-environment.outputs.BRANCH }}
    strategy:
      fail-fast: false
      matrix:
        redis-version: ["6.0.20", "7.2.4", "unstable"]
        builder: [
          {
            image: 'amazonlinux:2',
            nick: 'amzn2'
          }
        ]
    defaults:
      run:
        shell: bash -l -eo pipefail {0}
    needs: setup-environment
    steps:
      - name: Install build dependencies
        run: |
          amazon-linux-extras install epel -y
          yum -y install epel-release yum-utils
          yum-config-manager --add-repo http://mirror.centos.org/centos/7/sclo/x86_64/rh/
          yum -y install gcc make cmake3 git python-pip openssl-devel bzip2-devel libffi-devel zlib-devel wget centos-release-scl scl-utils which tar
          yum -y install devtoolset-11-gcc devtoolset-11-gcc-c++ devtoolset-11-make --nogpgcheck
          . scl_source enable devtoolset-11 || true
          make --version
          git --version
          wget https://www.python.org/ftp/python/3.9.6/Python-3.9.6.tgz
          tar -xvf Python-3.9.6.tgz
          cd Python-3.9.6
          ./configure
          make -j `nproc`
          make altinstall
          cd ..
          rm /usr/bin/python3 && ln -s `which python3.9` /usr/bin/python3
          ln -s `which cmake3` /usr/bin/cmake
          python3 --version
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install Python dependencies
        run: |
          scl enable devtoolset-11 bash
          python3 -m pip install -r tests/flow/requirements.txt
      - name: Checkout Redis
        uses: actions/checkout@v3
        with:
          repository: 'redis/redis'
          ref: ${{ matrix.redis-version }}
          path: 'redis'
      - name: Build Redis
        run: |
          cd redis && make -j `nproc`
      - name: Build RedisBloom
        run: |
          . scl_source enable devtoolset-11 || true
          make -j `nproc`
      - name: Run tests
        run: |
          . scl_source enable devtoolset-11 || true
          make test REDIS_SERVER=$GITHUB_WORKSPACE/redis/src/redis-server
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"
      - name: Upload artifacts to S3
        run: |
          # TODO: Get rid of this in favour of GitHub actions or a docker image:
          # https://hub.docker.com/r/amazon/aws-cli
          export HOMEBREW_NO_AUTO_UPDATE=1
          ./deps/readies/bin/getaws
          mkdir -p bin
          ln -s ~/workspace/artifacts bin/artifacts
          if [[ $STAGING -eq 1 ]]; then
            make upload-artifacts SHOW=1 VERBOSE=1
          fi
          make upload-release STAGING=$STAGING SHOW=1 VERBOSE=1
      - name: Publish docker image
        run: |
          # TODO: GET RID OF THIS in favour of GitHub actions or a docker image.
          # https://docs.github.com/en/actions/publishing-packages/publishing-docker-images
          ./deps/readies/bin/getdocker
          docker login -u redisfab -p ${{ secrets.DOCKER_REDISFAB_PASSWORD }}
          cd build/docker
          make publish OSNICK=${{ matrix.builder.nick }} VERSION="$VERSION" BRANCH="$BRANCH" OFFICIAL=1 SHOW=1
      - name: List artifacts
        run: |
          cd bin/artifacts
          du -ah --apparent-size *

  rocky-linux:
    runs-on: ubuntu-latest
    container: ${{ matrix.builder.image }}
    strategy:
      fail-fast: false
      matrix:
        redis-version: ["6.0.20", "7.2.4", "unstable"]
        builder: [{
            image: 'rockylinux:8',
            nick: 'rocky8'
          },
          {
            image: 'rockylinux:9',
            nick: 'rocky9'
          }
        ]
    defaults:
      run:
        shell: bash -l -eo pipefail {0}
    needs: setup-environment
    steps:
      - name: Install build dependencies
        run: |
          yum -y install epel-release
          yum -y install http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-2.noarch.rpm
          yum -y install gcc make cmake3 git openssl-devel bzip2-devel libffi-devel zlib-devel wget scl-utils gcc-toolset-13 which
          yum groupinstall "Development Tools" -y
          . scl_source enable gcc-toolset-13 || true
          make --version
          gcc --version
          git --version
          wget https://www.python.org/ftp/python/3.9.6/Python-3.9.6.tgz
          tar -xvf Python-3.9.6.tgz
          cd Python-3.9.6
          ./configure
          make -j `nproc`
          make altinstall
          cd ..
          rm /usr/bin/python3 && ln -s `which python3.9` /usr/bin/python3
          cmake --version
          python3 --version
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install Python dependencies
        run: |
          . scl_source enable gcc-toolset-13 || true
          python3 -m pip install -r tests/flow/requirements.txt
      - name: Checkout Redis
        uses: actions/checkout@v3
        with:
          repository: 'redis/redis'
          ref: ${{ matrix.redis-version }}
          path: 'redis'
      - name: Build Redis
        run: |
          cd redis && make -j `nproc`
      - name: Build RedisBloom
        run: |
          . scl_source enable gcc-toolset-13 || true
          make -j `nproc`
      - name: Run tests
        run: |
          . scl_source enable gcc-toolset-13 || true
          make test REDIS_SERVER=$GITHUB_WORKSPACE/redis/src/redis-server
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"
      - name: Upload artifacts to S3
        run: |
          # TODO: Get rid of this in favour of GitHub actions or a docker image:
          # https://hub.docker.com/r/amazon/aws-cli
          export HOMEBREW_NO_AUTO_UPDATE=1
          ./deps/readies/bin/getaws
          mkdir -p bin
          ln -s ~/workspace/artifacts bin/artifacts
          if [[ $STAGING -eq 1 ]]; then
            make upload-artifacts SHOW=1 VERBOSE=1
          fi
          make upload-release STAGING=$STAGING SHOW=1 VERBOSE=1
      - name: Publish docker image
        run: |
          # TODO: GET RID OF THIS in favour of GitHub actions or a docker image.
          # https://docs.github.com/en/actions/publishing-packages/publishing-docker-images
          ./deps/readies/bin/getdocker
          docker login -u redisfab -p ${{ secrets.DOCKER_REDISFAB_PASSWORD }}
          cd build/docker
          make publish OSNICK=${{ matrix.builder.nick }} VERSION="$VERSION" BRANCH="$BRANCH" OFFICIAL=1 SHOW=1
      - name: List artifacts
        run: |
          cd bin/artifacts
          du -ah --apparent-size *

  macos-x86_64:
    runs-on: macos-13
    strategy:
      fail-fast: false
      matrix:
        redis-version: ["6.0.20", "7.2.4", "unstable"]
    defaults:
      run:
        shell: bash -l -eo pipefail {0}
    needs: setup-environment
    steps:
      - name: Install prerequisites
        run: |
          brew install make
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install Python dependencies
        run: |
          python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip install -r tests/flow/requirements.txt
      - name: Checkout Redis
        uses: actions/checkout@v3
        with:
          repository: 'redis/redis'
          ref: ${{ matrix.redis-version }}
          path: 'redis'
      - name: Build Redis
        run: |
          cd redis && make -j `sysctl -n hw.logicalcpu`
      - name: Build RedisBloom
        run: |
          gmake -j `sysctl -n hw.logicalcpu`
      - name: Run tests
        run: |
          gmake test REDIS_SERVER=$GITHUB_WORKSPACE/redis/src/redis-server
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"
      - name: Upload artifacts to S3
        run: |
          # TODO: Get rid of this in favour of GitHub actions or a docker image:
          # https://hub.docker.com/r/amazon/aws-cli
          export HOMEBREW_NO_AUTO_UPDATE=1
          ./deps/readies/bin/getaws
          mkdir -p bin
          ln -s ~/workspace/artifacts bin/artifacts
          if [[ $STAGING -eq 1 ]]; then
            make upload-artifacts SHOW=1 VERBOSE=1
          fi
          make upload-release STAGING=$STAGING SHOW=1 VERBOSE=1
      - name: Publish docker image
        run: |
          # TODO: GET RID OF THIS in favour of GitHub actions or a docker image.
          # https://docs.github.com/en/actions/publishing-packages/publishing-docker-images
          ./deps/readies/bin/getdocker
          docker login -u redisfab -p ${{ secrets.DOCKER_REDISFAB_PASSWORD }}
          cd build/docker
          make publish OSNICK=${{ matrix.builder.nick }} VERSION="$VERSION" BRANCH="$BRANCH" OFFICIAL=1 SHOW=1
      - name: List artifacts
        run: |
          cd bin/artifacts
          du -ah --apparent-size *
